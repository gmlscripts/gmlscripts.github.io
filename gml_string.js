// Generated by Haxe 4.3.3
(function ($hx_exports, $global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.now = function() {
	return Date.now();
};
Math.__name__ = true;
var gml_string_kind = $hxEnums["gml.string.kind"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"gml.string.kind",toString:$estr}
	,Error: {_hx_name:"Error",_hx_index:1,__enum__:"gml.string.kind",toString:$estr}
	,Space: {_hx_name:"Space",_hx_index:2,__enum__:"gml.string.kind",toString:$estr}
	,NewLine: {_hx_name:"NewLine",_hx_index:3,__enum__:"gml.string.kind",toString:$estr}
	,CommentLine: {_hx_name:"CommentLine",_hx_index:4,__enum__:"gml.string.kind",toString:$estr}
	,CommentBlock: {_hx_name:"CommentBlock",_hx_index:5,__enum__:"gml.string.kind",toString:$estr}
	,HeaderMeta: {_hx_name:"HeaderMeta",_hx_index:6,__enum__:"gml.string.kind",toString:$estr}
	,HeaderName: {_hx_name:"HeaderName",_hx_index:7,__enum__:"gml.string.kind",toString:$estr}
	,Keyword: {_hx_name:"Keyword",_hx_index:8,__enum__:"gml.string.kind",toString:$estr}
	,CurlyBracket: {_hx_name:"CurlyBracket",_hx_index:9,__enum__:"gml.string.kind",toString:$estr}
	,Operator: {_hx_name:"Operator",_hx_index:10,__enum__:"gml.string.kind",toString:$estr}
	,Ident: {_hx_name:"Ident",_hx_index:11,__enum__:"gml.string.kind",toString:$estr}
	,Constant: {_hx_name:"Constant",_hx_index:12,__enum__:"gml.string.kind",toString:$estr}
	,Variable: {_hx_name:"Variable",_hx_index:13,__enum__:"gml.string.kind",toString:$estr}
	,Function: {_hx_name:"Function",_hx_index:14,__enum__:"gml.string.kind",toString:$estr}
	,Script: {_hx_name:"Script",_hx_index:15,__enum__:"gml.string.kind",toString:$estr}
	,Local: {_hx_name:"Local",_hx_index:16,__enum__:"gml.string.kind",toString:$estr}
	,Global: {_hx_name:"Global",_hx_index:17,__enum__:"gml.string.kind",toString:$estr}
	,Macro: {_hx_name:"Macro",_hx_index:18,__enum__:"gml.string.kind",toString:$estr}
	,Enum: {_hx_name:"Enum",_hx_index:19,__enum__:"gml.string.kind",toString:$estr}
	,EnumField: {_hx_name:"EnumField",_hx_index:20,__enum__:"gml.string.kind",toString:$estr}
	,String: {_hx_name:"String",_hx_index:21,__enum__:"gml.string.kind",toString:$estr}
	,Number: {_hx_name:"Number",_hx_index:22,__enum__:"gml.string.kind",toString:$estr}
	,Sizeof: {_hx_name:"Sizeof",_hx_index:23,__enum__:"gml.string.kind",toString:$estr}
};
gml_string_kind.__constructs__ = [gml_string_kind.None,gml_string_kind.Error,gml_string_kind.Space,gml_string_kind.NewLine,gml_string_kind.CommentLine,gml_string_kind.CommentBlock,gml_string_kind.HeaderMeta,gml_string_kind.HeaderName,gml_string_kind.Keyword,gml_string_kind.CurlyBracket,gml_string_kind.Operator,gml_string_kind.Ident,gml_string_kind.Constant,gml_string_kind.Variable,gml_string_kind.Function,gml_string_kind.Script,gml_string_kind.Local,gml_string_kind.Global,gml_string_kind.Macro,gml_string_kind.Enum,gml_string_kind.EnumField,gml_string_kind.String,gml_string_kind.Number,gml_string_kind.Sizeof];
var gml_string_api = function() { };
gml_string_api.__name__ = true;
gml_string_api.identMap_init = function() {
	var map = Object.create(null);
	var arr = ["globalvar","var","if","then","else","begin","end","for","while","do","until","repeat","switch","case","default","break","continue","with","exit","return","self","other","noone","all","global","local","mod","div","not","and","or","xor","enum","function","new","constructor","static"];
	var _g = 0;
	var _g1 = arr.length;
	while(_g < _g1) {
		var i = _g++;
		map[arr[i]] = gml_string_kind.Keyword;
	}
	return map;
};
gml_string_api.parseDefsImpl = function() {
	gml_string_parser.pos = 0;
	while(gml_string_parser.pos < gml_string_parser.len) {
		var start = gml_string_parser.pos++;
		var c = gml_string_parser.str.charCodeAt(start);
		var needSkip = c != 10;
		if(gml_string_parser.isIdent0[c]) {
			while(gml_string_parser.pos < gml_string_parser.len && gml_string_parser.isIdent1[gml_string_parser.str.charCodeAt(gml_string_parser.pos)]) gml_string_parser.pos++;
			var id = gml_string_parser.str.substring(start,gml_string_parser.pos);
			var kind = gml_string_kind.Variable;
			while(gml_string_parser.pos < gml_string_parser.len) {
				var c1 = gml_string_parser.str.charCodeAt(gml_string_parser.pos++);
				if(gml_string_parser.isSpace[c1]) {
					continue;
				}
				switch(c1) {
				case 10:
					needSkip = false;
					break;
				case 35:
					kind = gml_string_kind.Constant;
					break;
				case 40:
					kind = gml_string_kind.Function;
					break;
				case 63:
					kind = null;
					break;
				}
				break;
			}
			if(kind != null) {
				gml_string_api.identMap[id] = kind;
			}
		}
		if(needSkip) {
			while(gml_string_parser.pos < gml_string_parser.len) if(gml_string_parser.str.charCodeAt(gml_string_parser.pos++) == 10) {
				break;
			}
		}
	}
};
gml_string_api.loadFromString = function(fnamesText) {
	gml_string_parser.str = fnamesText;
	gml_string_parser.len = fnamesText.length;
	gml_string_api.parseDefsImpl();
};
var gml_string_hint_$locals = function() { };
gml_string_hint_$locals.__name__ = true;
gml_string_hint_$locals.hintLocals_pre = function(ctx) {
	var tokens = ctx.tokens;
	var globals = ctx.globals;
	var enumList = ctx.enumList;
	var enumMap = ctx.enumMap;
	var pos = ctx.pos;
	var len = tokens.length;
	while(pos < len) {
		var tk = tokens[pos++];
		if(tk.kind == gml_string_kind.HeaderName) {
			globals[tk.text] = gml_string_kind.Script;
			continue;
		}
		switch(tk.text) {
		case "#macro":
			while(pos < len) if(gs_GsTokenTools.isSpace(tokens[pos])) {
				++pos;
			} else {
				break;
			}
			if(pos >= len) {
				continue;
			}
			tk = tokens[pos];
			if(tk.kind != gml_string_kind.Ident) {
				continue;
			}
			++pos;
			if(pos + 1 < len && tokens[pos].text == ":" && tokens[pos + 1].kind == gml_string_kind.Ident) {
				tk.kind = gml_string_kind.Macro;
				tk = tokens[pos + 1];
				tk.kind = gml_string_kind.Macro;
				globals[tk.text] = gml_string_kind.Macro;
			} else {
				globals[tk.text] = gml_string_kind.Macro;
			}
			break;
		case "enum":
			while(pos < len) if(gs_GsTokenTools.isSpace(tokens[pos])) {
				++pos;
			} else {
				break;
			}
			if(pos >= len) {
				continue;
			}
			tk = tokens[pos];
			if(tk.kind != gml_string_kind.Ident) {
				continue;
			}
			++pos;
			tk.kind = gml_string_kind.Enum;
			var enu = Object.create(null);
			enumList.push(enu);
			enumMap[tk.text] = enu;
			while(pos < len) if(gs_GsTokenTools.isSpace(tokens[pos])) {
				++pos;
			} else {
				break;
			}
			if(pos >= len) {
				continue;
			}
			tk = tokens[pos];
			if(tk.text != "{" && tk.text != "begin") {
				continue;
			}
			++pos;
			var bracketDepth = 0;
			var wantCtr = true;
			while(pos < len) {
				tk = tokens[pos++];
				if(gs_GsTokenTools.isSpace(tk)) {
					continue;
				}
				var s = tk.text;
				var delta = gs_GsTokenTools.getDepthDelta(tk);
				if(delta != 0) {
					bracketDepth += delta;
					if(bracketDepth < 0) {
						break;
					} else {
						continue;
					}
				}
				if(s == ",") {
					if(bracketDepth == 0) {
						wantCtr = true;
					}
				} else if(tk.kind == gml_string_kind.Ident) {
					if(wantCtr) {
						wantCtr = false;
						tk.kind = gml_string_kind.EnumField;
						enu[tk.text] = true;
					}
				}
			}
			break;
		case "function":
			if(tk.kind == gml_string_kind.Keyword) {
				while(pos < len) if(gs_GsTokenTools.isSpace(tokens[pos])) {
					++pos;
				} else {
					break;
				}
				if(pos < len) {
					tk = tokens[pos++];
					if(tk.kind == gml_string_kind.Ident) {
						globals[tk.text] = gml_string_kind.Script;
					}
				}
			}
			break;
		case "globalvar":
			while(pos < len) {
				tk = tokens[pos];
				if(gs_GsTokenTools.isSpace(tk)) {
					++pos;
					continue;
				}
				if(tk.kind != gml_string_kind.Ident) {
					break;
				}
				++pos;
				tk.kind = gml_string_kind.Global;
				globals[tk.text] = gml_string_kind.Global;
				while(pos < len) if(gs_GsTokenTools.isSpace(tokens[pos])) {
					++pos;
				} else {
					break;
				}
				if(pos >= len) {
					break;
				}
				if(tk.text == ",") {
					++pos;
				} else {
					break;
				}
			}
			break;
		}
	}
};
gml_string_hint_$locals.patchIdent = function(tk,ctx,locals,pos) {
	var tkText = tk.text;
	var tokens;
	if(locals != null && Object.prototype.hasOwnProperty.call(locals,tkText)) {
		var lp = pos - 1;
		tokens = ctx.tokens;
		var ok = true;
		while(--lp >= 0) {
			var ltk = tokens[lp];
			if(gs_GsTokenTools.isSpace(ltk)) {
				continue;
			}
		}
		tk.kind = gml_string_kind.Local;
		return pos;
	}
	var tkKind = ctx.globals[tkText];
	if(tkKind != null) {
		tk.kind = tkKind;
		return pos;
	}
	if(ctx.enumList.length == 0) {
		return pos;
	}
	var enu = ctx.enumMap[tkText];
	if(enu == null) {
		return pos;
	}
	var len = ctx.len;
	tokens = ctx.tokens;
	while(pos < len) if(gs_GsTokenTools.isSpace(tokens[pos])) {
		++pos;
	} else {
		break;
	}
	if(pos >= len) {
		return pos;
	}
	if(ctx.tokens[pos].text != ".") {
		return pos;
	}
	++pos;
	while(pos < len) if(gs_GsTokenTools.isSpace(tokens[pos])) {
		++pos;
	} else {
		break;
	}
	if(pos >= len) {
		return pos;
	}
	var tk2 = ctx.tokens[pos];
	if(tk2.kind != gml_string_kind.Ident) {
		return pos;
	}
	if(!Object.prototype.hasOwnProperty.call(enu,tk2.text)) {
		return pos;
	}
	tk.kind = gml_string_kind.Enum;
	tk2.kind = gml_string_kind.EnumField;
	return ++pos;
};
gml_string_hint_$locals.hintLocals_recFunc = function(ctx,pos) {
	var tokens = ctx.tokens;
	var len = tokens.length;
	var args = [];
	while(pos < len) if(gs_GsTokenTools.isSpace(tokens[pos])) {
		++pos;
	} else {
		break;
	}
	if(pos >= len) {
		ctx.pos = pos;
		return pos;
	}
	var tk = tokens[pos++];
	if(tk.kind == gml_string_kind.Ident || tk.kind == gml_string_kind.Function) {
		tk.kind = gml_string_kind.Script;
		while(pos < len) if(gs_GsTokenTools.isSpace(tokens[pos])) {
			++pos;
		} else {
			break;
		}
		if(pos >= len) {
			ctx.pos = pos;
			return pos;
		}
		tk = tokens[pos++];
	}
	if(tk.text != "(") {
		ctx.pos = pos;
		return pos;
	}
	var wantArg = true;
	var bracketDepth = 1;
	while(pos < len) {
		tk = tokens[pos++];
		if(gs_GsTokenTools.isSpace(tk)) {
			continue;
		}
		var delta = gs_GsTokenTools.getDepthDelta(tk);
		if(delta != 0) {
			bracketDepth += delta;
			if(bracketDepth <= 0) {
				break;
			} else {
				continue;
			}
		}
		if(tk.text == "function" && tk.kind == gml_string_kind.Keyword) {
			pos = gml_string_hint_$locals.hintLocals_recFunc(ctx,pos);
			continue;
		}
		if(tk.kind == gml_string_kind.Ident) {
			if(bracketDepth == 1 && wantArg) {
				wantArg = false;
				args.push(tk.text);
				tk.kind = gml_string_kind.Local;
				continue;
			}
			if(args.indexOf(tk.text) != -1) {
				tk.kind = gml_string_kind.Local;
			} else {
				pos = gml_string_hint_$locals.patchIdent(tk,ctx,null,pos);
			}
		}
		if(tk.text == "," && bracketDepth == 1) {
			wantArg = true;
		}
	}
	if(bracketDepth > 0) {
		return pos;
	}
	while(pos < len) if(gs_GsTokenTools.isSpace(tokens[pos])) {
		++pos;
	} else {
		break;
	}
	var isConstructor = false;
	if(pos < len) {
		tk = tokens[pos];
		if(tk.kind == gml_string_kind.Keyword && tk.text == "constructor" || tk.text == ":") {
			isConstructor = true;
		}
	}
	ctx.pos = pos;
	gml_string_hint_$locals.hintLocals_rec(ctx,args,isConstructor);
	return ctx.pos;
};
gml_string_hint_$locals.hintLocals_rec = function(ctx,args,isConstructor) {
	if(isConstructor == null) {
		isConstructor = false;
	}
	var locals = Object.create(null);
	if(args != null) {
		var _g = 0;
		while(_g < args.length) {
			var arg = args[_g];
			++_g;
			locals[arg] = true;
		}
	}
	var pos = ctx.pos;
	var tokens = ctx.tokens;
	var len = tokens.length;
	var globals = ctx.globals;
	var enumMap = ctx.enumMap;
	var bracketDepth = 0;
	while(pos < len) {
		var tk = tokens[pos++];
		if(gs_GsTokenTools.isSpace(tk)) {
			continue;
		}
		var delta = gs_GsTokenTools.getDepthDelta(tk);
		if(delta != 0) {
			bracketDepth += delta;
			if(args != null && bracketDepth <= 0 && tk.text == "}") {
				break;
			} else {
				continue;
			}
		}
		var tkKind = tk.kind;
		var tkText = tk.text;
		if(tkKind == gml_string_kind.Keyword && (tkText == "var" || tkText == "static" && !isConstructor)) {
			var wantVar = true;
			var startDepth = bracketDepth;
			while(pos < len) {
				tk = tokens[pos++];
				if(gs_GsTokenTools.isSpace(tk)) {
					if(bracketDepth <= startDepth && !wantVar && tk.kind == gml_string_kind.NewLine) {
						break;
					} else {
						continue;
					}
				}
				tkText = tk.text;
				var delta1 = gs_GsTokenTools.getDepthDelta(tk);
				if(delta1 != 0) {
					bracketDepth += delta1;
					if(bracketDepth < startDepth) {
						break;
					} else {
						continue;
					}
				}
				tkKind = tk.kind;
				if(tkText == "function" && tkKind == gml_string_kind.Keyword) {
					pos = gml_string_hint_$locals.hintLocals_recFunc(ctx,pos);
					continue;
				}
				if(tkKind == gml_string_kind.Ident) {
					if(wantVar && bracketDepth == startDepth) {
						wantVar = false;
						tk.kind = gml_string_kind.Local;
						locals[tk.text] = true;
						continue;
					}
					pos = gml_string_hint_$locals.patchIdent(tk,ctx,locals,pos);
					continue;
				}
				if(tkText == ",") {
					if(wantVar) {
						break;
					}
					wantVar = true;
				}
				if(tkText == ";") {
					break;
				}
				if(tkKind == gml_string_kind.Keyword && Object.prototype.hasOwnProperty.call(gml_string_api.flowKeywordMap,tkText)) {
					break;
				}
			}
			continue;
		}
		if(tkKind == gml_string_kind.Ident) {
			pos = gml_string_hint_$locals.patchIdent(tk,ctx,locals,pos);
			continue;
		}
		if(tkText == "function" && tkKind == gml_string_kind.Keyword) {
			pos = gml_string_hint_$locals.hintLocals_recFunc(ctx,pos);
			continue;
		}
	}
	ctx.pos = pos;
	return false;
};
gml_string_hint_$locals.hintLocals = function(tokenList) {
	var ctx = new gs_GsHintContext(tokenList);
	gml_string_hint_$locals.hintLocals_pre(ctx);
	gml_string_hint_$locals.hintLocals_rec(ctx,null);
	var _g = 0;
	var _g1 = ctx.enumList.length;
	while(_g < _g1) {
		var i = _g++;
	}
};
var gs_GsHintContext = function(tokens) {
	this.enumMap = Object.create(null);
	this.enumList = [];
	this.globals = Object.create(null);
	this.pos = 0;
	this.tokens = tokens;
	this.len = tokens.length;
};
gs_GsHintContext.__name__ = true;
var gs_GsTokenTools = function() { };
gs_GsTokenTools.__name__ = true;
gs_GsTokenTools.getKind = function(token) {
	return token.kind;
};
gs_GsTokenTools.setKind = function(token,newKind) {
	token.kind = newKind;
};
gs_GsTokenTools.getText = function(token) {
	return token.text;
};
gs_GsTokenTools.setText = function(token,newText) {
	token.text = newText;
};
gs_GsTokenTools.isSpace = function(token) {
	switch(token.kind._hx_index) {
	case 2:case 3:case 4:case 5:
		return true;
	default:
		return false;
	}
};
gs_GsTokenTools.getDepthDelta = function(token) {
	switch(token.text) {
	case "(":case "[":case "begin":case "{":
		return 1;
	case ")":case "]":case "end":case "}":
		return -1;
	default:
		return 0;
	}
};
gs_GsTokenTools.getName = function(kind) {
	return $hxEnums[kind.__enum__].__constructs__[kind._hx_index]._hx_name;
};
var gml_string_parser = function() { };
gml_string_parser.__name__ = true;
gml_string_parser.flushLine = function(kind) {
	var till = gml_string_parser.pos - 1;
	if(gml_string_parser.str.charCodeAt(till) == 13) {
		--till;
	}
	var tk = { kind : kind, text : gml_string_parser.str.substring(gml_string_parser.start,till)};
	gml_string_parser.out.push(tk);
	var tk = { kind : gml_string_kind.NewLine, text : "\n"};
	gml_string_parser.out.push(tk);
	gml_string_parser.lines_found++;
	gml_string_parser.start = gml_string_parser.pos;
};
gml_string_parser.isSpace_init = function() {
	var arr = new Array(256);
	arr[9] = true;
	arr[10] = true;
	arr[11] = true;
	arr[12] = true;
	arr[13] = true;
	arr[10] = false;
	arr[32] = true;
	return arr;
};
gml_string_parser.initRanges = function(ranges) {
	var arr = new Array(256);
	var _g = 0;
	while(_g < ranges.length) {
		var range = ranges[_g];
		++_g;
		if(range.length < 2) {
			arr[range[0]] = true;
		} else {
			var _g1 = range[0];
			var _g2 = range[1] + 1;
			while(_g1 < _g2) {
				var ind = _g1++;
				arr[ind] = true;
			}
		}
	}
	return arr;
};
gml_string_parser.invalid = function(_) {
	var m = gml_string_parser.lookup;
	while(gml_string_parser.pos < gml_string_parser.len) {
		var d = gml_string_parser.str.charCodeAt(gml_string_parser.pos);
		if(m[d] == gml_string_parser.invalid) {
			gml_string_parser.pos++;
		} else {
			break;
		}
	}
	return gml_string_kind.Error;
};
gml_string_parser.number = function(x) {
	var dot = x == 46;
	while(gml_string_parser.pos < gml_string_parser.len) {
		var c = gml_string_parser.str.charCodeAt(gml_string_parser.pos);
		if(c == 46 && !dot) {
			dot = false;
			gml_string_parser.pos++;
		} else if(c >= 48 && c <= 57 || c == 95) {
			gml_string_parser.pos++;
		} else {
			break;
		}
	}
	return gml_string_kind.Number;
};
gml_string_parser.hex = function(x) {
	var m = gml_string_parser.isHex;
	while(gml_string_parser.pos < gml_string_parser.len) if(m[gml_string_parser.str.charCodeAt(gml_string_parser.pos)]) {
		gml_string_parser.pos++;
	} else {
		break;
	}
	return gml_string_kind.Number;
};
gml_string_parser.bin = function(x) {
	var m = gml_string_parser.isBinary;
	while(gml_string_parser.pos < gml_string_parser.len) if(m[gml_string_parser.str.charCodeAt(gml_string_parser.pos)]) {
		gml_string_parser.pos++;
	} else {
		break;
	}
	return gml_string_kind.Number;
};
gml_string_parser.initLookup = function() {
	var lookup = new Array(256);
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		lookup[i] = gml_string_parser.invalid;
	}
	var space = function(c) {
		while(gml_string_parser.pos < gml_string_parser.len) if(gml_string_parser.isSpace[gml_string_parser.str.charCodeAt(gml_string_parser.pos)]) {
			gml_string_parser.pos++;
		} else {
			break;
		}
		return gml_string_kind.Space;
	};
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		if(gml_string_parser.isSpace[i]) {
			lookup[i] = space;
		}
	}
	lookup[13] = function(_) {
		gml_string_parser.start++;
		return gml_string_kind.Space;
	};
	var nl = function(_) {
		gml_string_parser.lines_found++;
		return gml_string_kind.NewLine;
	};
	lookup[10] = nl;
	var slash = function(_) {
		switch(gml_string_parser.str.charCodeAt(gml_string_parser.pos)) {
		case 42:
			gml_string_parser.pos++;
			while(gml_string_parser.pos < gml_string_parser.len) {
				var c = gml_string_parser.str.charCodeAt(gml_string_parser.pos++);
				if(c == 10) {
					gml_string_parser.flushLine(gml_string_kind.CommentBlock);
				} else if(c == 42 && gml_string_parser.str.charCodeAt(gml_string_parser.pos) == 47) {
					gml_string_parser.pos++;
					break;
				}
			}
			return gml_string_kind.CommentBlock;
		case 47:
			gml_string_parser.pos++;
			while(gml_string_parser.pos < gml_string_parser.len) {
				var c = gml_string_parser.str.charCodeAt(gml_string_parser.pos);
				if(c == 13 || c == 10) {
					break;
				} else {
					gml_string_parser.pos++;
				}
			}
			return gml_string_kind.CommentLine;
		case 61:
			gml_string_parser.pos++;
			return gml_string_kind.Operator;
		default:
			return gml_string_kind.Operator;
		}
	};
	lookup[47] = slash;
	var ident = function(_) {
		var start = gml_string_parser.pos - 1;
		var m = gml_string_parser.isIdent1;
		while(gml_string_parser.pos < gml_string_parser.len) if(m[gml_string_parser.str.charCodeAt(gml_string_parser.pos)]) {
			gml_string_parser.pos++;
		} else {
			break;
		}
		var kind = gml_string_api.identMap[gml_string_parser.str.substring(start,gml_string_parser.pos)];
		if(kind != null) {
			return kind;
		} else {
			return gml_string_kind.Ident;
		}
	};
	lookup[95] = ident;
	var _g = 97;
	var _g1 = 123;
	while(_g < _g1) {
		var c = _g++;
		lookup[c] = ident;
	}
	var _g = 65;
	var _g1 = 91;
	while(_g < _g1) {
		var c = _g++;
		lookup[c] = ident;
	}
	var opSimple = function(_) {
		return gml_string_kind.Operator;
	};
	lookup[44] = opSimple;
	lookup[59] = opSimple;
	lookup[63] = opSimple;
	lookup[58] = opSimple;
	lookup[40] = opSimple;
	lookup[41] = opSimple;
	lookup[91] = opSimple;
	lookup[93] = opSimple;
	var curly = function(_) {
		return gml_string_kind.CurlyBracket;
	};
	lookup[123] = curly;
	lookup[125] = curly;
	var hash = function(_) {
		var p = gml_string_parser.pos;
		if(gml_string_parser.isIdent1[gml_string_parser.str.charCodeAt(p)]) {
			while(++p < gml_string_parser.len) if(!gml_string_parser.isIdent1[gml_string_parser.str.charCodeAt(p)]) {
				break;
			}
			var word = gml_string_parser.str.substring(gml_string_parser.pos,p);
			switch(word) {
			case "define":
				if(gml_string_parser.pos <= 1 || gml_string_parser.str.charCodeAt(gml_string_parser.pos - 2) == 10) {
					var tk = { kind : gml_string_kind.HeaderMeta, text : "#define"};
					gml_string_parser.out.push(tk);
					gml_string_parser.start = p;
					while(p < gml_string_parser.len) if(gml_string_parser.isSpace[gml_string_parser.str.charCodeAt(p)]) {
						++p;
					} else {
						break;
					}
					if(p > gml_string_parser.start) {
						var tk = { kind : gml_string_kind.Space, text : gml_string_parser.str.substring(gml_string_parser.start,p)};
						gml_string_parser.out.push(tk);
						gml_string_parser.start = p;
					}
					while(p < gml_string_parser.len) {
						var c = gml_string_parser.str.charCodeAt(p);
						if(c == 13 || c == 10) {
							break;
						} else {
							++p;
						}
					}
					gml_string_parser.pos = p;
					return gml_string_kind.HeaderName;
				}
				break;
			case "endregion":case "region":
				while(p < gml_string_parser.len) {
					var c = gml_string_parser.str.charCodeAt(p);
					if(c == 13 || c == 10) {
						break;
					} else {
						++p;
					}
				}
				gml_string_parser.pos = p;
				return gml_string_kind.CommentLine;
			case "macro":
				gml_string_parser.pos = p;
				return gml_string_kind.Keyword;
			}
			if(p - gml_string_parser.pos == 6) {
				var k = 6;
				var _isHex = gml_string_parser.isHex;
				while(--k >= 0) if(!_isHex[HxOverrides.cca(word,k)]) {
					break;
				}
				if(k < 0) {
					gml_string_parser.pos = p;
					return gml_string_kind.Number;
				}
			}
		}
		return gml_string_kind.Operator;
	};
	lookup[35] = hash;
	var opFix = function(x) {
		var c = gml_string_parser.str.charCodeAt(gml_string_parser.pos);
		if(c == 61 || c == x) {
			gml_string_parser.pos++;
		}
		return gml_string_kind.Operator;
	};
	lookup[45] = opFix;
	lookup[43] = opFix;
	var opSet = function(_) {
		if(gml_string_parser.str.charCodeAt(gml_string_parser.pos) == 61) {
			gml_string_parser.pos++;
		}
		return gml_string_kind.Operator;
	};
	lookup[33] = opSet;
	lookup[61] = opSet;
	lookup[42] = opSet;
	lookup[37] = opSet;
	var opSet2 = function(x) {
		var c = gml_string_parser.str.charCodeAt(gml_string_parser.pos);
		if(c == x || c == 61) {
			gml_string_parser.pos++;
		}
		return gml_string_kind.Operator;
	};
	lookup[124] = opSet2;
	lookup[94] = opSet2;
	lookup[38] = opSet2;
	lookup[62] = opSet2;
	var lt = function(_) {
		switch(gml_string_parser.str.charCodeAt(gml_string_parser.pos)) {
		case 60:case 61:case 62:
			gml_string_parser.pos++;
			break;
		}
		return gml_string_kind.Operator;
	};
	lookup[60] = lt;
	lookup[64] = function(_) {
		if(gml_string_api.version > 1) {
			var c = gml_string_parser.str.charCodeAt(gml_string_parser.pos);
			if(c == 34 || c == 39) {
				gml_string_parser.pos++;
				while(gml_string_parser.pos < gml_string_parser.len) {
					var c1 = gml_string_parser.str.charCodeAt(gml_string_parser.pos++);
					if(c1 == 10) {
						gml_string_parser.flushLine(gml_string_kind.String);
					} else if(c1 == c) {
						break;
					}
				}
				return gml_string_kind.String;
			}
		}
		return gml_string_kind.Operator;
	};
	lookup[34] = function(x) {
		if(gml_string_api.version > 1) {
			while(gml_string_parser.pos < gml_string_parser.len) {
				var c = gml_string_parser.str.charCodeAt(gml_string_parser.pos++);
				if(c == 34) {
					break;
				}
				if(c == 10) {
					gml_string_parser.pos--;
					break;
				}
				if(c == 92) {
					switch(gml_string_parser.str.charCodeAt(gml_string_parser.pos++)) {
					case 10:
						gml_string_parser.flushLine(gml_string_kind.String);
						break;
					case 85:case 117:
						gml_string_parser.pos += 4;
						break;
					case 88:case 120:
						gml_string_parser.pos += 2;
						break;
					}
				}
			}
			return gml_string_kind.String;
		} else {
			while(gml_string_parser.pos < gml_string_parser.len) {
				var c = gml_string_parser.str.charCodeAt(gml_string_parser.pos++);
				if(c == 10) {
					gml_string_parser.flushLine(gml_string_kind.String);
				} else if(c == x) {
					break;
				}
			}
			return gml_string_kind.String;
		}
	};
	lookup[39] = function(x) {
		if(gml_string_api.version > 1) {
			return gml_string_parser.invalid(x);
		}
		while(gml_string_parser.pos < gml_string_parser.len) {
			var c = gml_string_parser.str.charCodeAt(gml_string_parser.pos++);
			if(c == 10) {
				gml_string_parser.flushLine(gml_string_kind.String);
			} else if(c == x) {
				break;
			}
		}
		return gml_string_kind.String;
	};
	var dollar = function(x) {
		if(gml_string_parser.isHex[gml_string_parser.str.charCodeAt(gml_string_parser.pos)]) {
			return gml_string_parser.hex(x);
		} else {
			return gml_string_kind.Operator;
		}
	};
	lookup[36] = dollar;
	var zero = function(x) {
		switch(gml_string_parser.str.charCodeAt(gml_string_parser.pos)) {
		case 98:
			gml_string_parser.pos++;
			return gml_string_parser.bin(x);
		case 120:
			gml_string_parser.pos++;
			return gml_string_parser.hex(x);
		default:
			return gml_string_parser.number(x);
		}
	};
	lookup[48] = zero;
	var _g = 49;
	var _g1 = 58;
	while(_g < _g1) {
		var c = _g++;
		lookup[c] = gml_string_parser.number;
	}
	var dot = function(x) {
		var c = gml_string_parser.str.charCodeAt(gml_string_parser.pos);
		if(c >= 48 && c <= 57) {
			return gml_string_parser.number(x);
		}
		return gml_string_kind.Operator;
	};
	lookup[46] = dot;
	return lookup;
};
gml_string_parser.parse = function(codeString,outList) {
	gml_string_parser.out = outList;
	var startSize = outList.length;
	gml_string_parser.str = codeString;
	gml_string_parser.len = codeString.length;
	gml_string_parser.lines_found = gml_string_parser.len > 0 ? 1 : 0;
	gml_string_parser.pos = 0;
	var _lookup = gml_string_parser.lookup;
	var byte;
	var kind;
	while(gml_string_parser.pos < gml_string_parser.len) {
		gml_string_parser.start = gml_string_parser.pos++;
		byte = gml_string_parser.str.charCodeAt(gml_string_parser.start);
		kind = _lookup[byte](byte);
		if(gml_string_parser.pos > gml_string_parser.start) {
			var tk = { kind : kind, text : gml_string_parser.str.substring(gml_string_parser.start,gml_string_parser.pos)};
			gml_string_parser.out.push(tk);
		}
	}
	return outList.length - startSize;
};
var gs_GsJS = $hx_exports["gml_string"] = function() { };
gs_GsJS.__name__ = true;
gs_GsJS.renderToHTML = function(tokens,classPrefix) {
	if(classPrefix == null) {
		classPrefix = "";
	}
	var r = "";
	var _g = 0;
	var _g1 = tokens;
	while(_g < _g1.length) {
		var tk = _g1[_g];
		++_g;
		var tkk = tk.kind;
		switch(tkk._hx_index) {
		case 2:
			r += tk.text;
			break;
		case 3:
			r += "\n";
			break;
		default:
			r += "<span class=\"" + classPrefix + $hxEnums[tkk.__enum__].__constructs__[tkk._hx_index]._hx_name + "\">" + tk.text + "</span>";
		}
	}
	return r;
};
gs_GsJS.main = function() {
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
gml_string_api.version = 2;
gml_string_api.tabString = "    ";
gml_string_api.identMap = gml_string_api.identMap_init();
gml_string_api.enumMap = Object.create(null);
gml_string_api.flowKeywordMap = (function($this) {
	var $r;
	var init = function() {
		var map = Object.create(null);
		var arr = ["if","then","else","begin","end","for","while","do","until","repeat","with","break","continue","switch","case","default","exit","return","enum","var","globalvar"];
		var _g = 0;
		var _g1 = arr.length;
		while(_g < _g1) {
			var i = _g++;
			map[arr[i]] = true;
		}
		return map;
	};
	$r = init();
	return $r;
}(this));
gml_string_parser.lines_found = 0;
gml_string_parser.isSpace = gml_string_parser.isSpace_init();
gml_string_parser.isIdent0 = gml_string_parser.initRanges([[95],[97,122],[65,90]]);
gml_string_parser.isIdent1 = gml_string_parser.initRanges([[95],[97,122],[65,90],[48,57]]);
gml_string_parser.isHex = gml_string_parser.initRanges([[95],[97,102],[65,70],[48,57]]);
gml_string_parser.isBinary = gml_string_parser.initRanges([[95],[48,49]]);
gml_string_parser.lookup = gml_string_parser.initLookup();
gs_GsJS.parse = gml_string_parser.parse;
gs_GsJS.hintLocals = gml_string_hint_$locals.hintLocals;
gs_GsJS.TokenKind = gml_string_kind;
gs_GsJS.TokenTools = gs_GsTokenTools;
gs_GsJS.API = gml_string_api;
gs_GsJS.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, {});
