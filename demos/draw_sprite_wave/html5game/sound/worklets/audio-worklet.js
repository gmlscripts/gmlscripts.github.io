AudioWorkletProcessor.prototype._N=function(){this._O=true;this.port.onmessage=(_P)=>{if(_P.data==="kill")this._O=false;};};class _Q extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._N();}process(_R,_S,parameters){const input=_R[0];const bypass=parameters.bypass;for(let c=0;c<input.length;++c){const _T=input[c];for(let _U=0;_U<_T.length;++_U){const _V=(bypass[_U]!==undefined)?bypass[_U]:bypass[0];
_S[_V][c][_U]=_T[_U];}}return this._O;}}class _W extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._N();}process(_R,_S,parameters){const _X=_R[0];const _Y=_R[1];const output=_S[0];const gain=parameters.gain;for(let c=0;c<_Y.length;++c){const _T=_Y[c];const _Z=output[c];for(let _U=0;_U<_T.length;++_U)_Z[_U]=_T[_U];}for(let c=0;c<_X.length;++c){const _T=_X[c];const _Z=output[c];for(let _U=0;_U<_T.length;
++_U){const __=(gain[_U]!==undefined)?gain[_U]:gain[0];_Z[_U]+=_T[_U]*__;}}return this._O;}}registerProcessor("audio-bus-input",_Q);registerProcessor("audio-bus-output",_W);class _01 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100},{name:"resolution",automationRate:"a-rate",
defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _11=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_21){super();this._N();const _31=_21.outputChannelCount[0];this._41=new Float32Array(_31);this._51=new Uint32Array(_31);}process(_R,_S,parameters){const input=_R[0];const output=_S[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;const resolution=parameters.resolution;
const mix=parameters.mix;for(let c=0;c<input.length;++c){const _T=input[c];const _Z=output[c];for(let _U=0;_U<_T.length;++_U){_Z[_U]=_T[_U];if(this._51[c]===0)this._41[c]=_T[_U];const _61=(factor[_U]!==undefined)?factor[_U]:factor[0];++this._51[c];this._51[c]%=_61;const _V=(bypass[_U]!==undefined)?bypass[_U]:bypass[0];if(_V>0.0){continue;}let _71=this._41[c];const __=(gain[_U]!==undefined)?gain[_U]:gain[0];_71*=__;_71=Math.max(Math.min(_71,1.0),-1.0);const _81=(resolution[_U]!==undefined)?resolution[_U]:resolution[0];
const max=(_71>0.0)?_01._11[_81]-1:_01._11[_81];_71=Math.round(_71*max)/max;const _91=(mix[_U]!==undefined)?mix[_U]:mix[0];_Z[_U]*=(1.0-_91);_Z[_U]+=(_71*_91);}}return this._O;}}registerProcessor("bitcrusher-processor",_01);class _a1{constructor(_b1=1e-3){this.setTime(_b1);}setTime(_b1){this._c1=Math.exp(-1/(_b1*sampleRate));}process(_d1,_e1){return _d1+this._c1*(_e1-_d1);}}class _f1{constructor(_g1,_h1){this._i1=new _a1(_g1);this._j1=new _a1(_h1);this._k1=_g1;this._l1=_h1;}_m1(_b1){if(_b1===this._k1)return;
this._i1.setTime(_b1);this._k1=_b1;}_n1(_b1){if(_b1===this._l1)return;this._j1.setTime(_b1);this._l1=_b1;}process(_d1,_e1){if(_d1>_e1)return this._i1.process(_d1,_e1);else return this._j1.process(_d1,_e1);}}class _o1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0},{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1}
,{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_p1){super();this._N();const _i1=_o1.parameterDescriptors.find(_q1=>_q1.name==="attack");const _j1=_o1.parameterDescriptors.find(_q1=>_q1.name==="release");this._r1=new _f1(_i1.defaultValue,
_j1.defaultValue);this._s1=0;}process(_t1,_u1,_v1){const input=_t1[0];const output=_u1[0];const bypass=_v1.bypass;const ingain=_v1.ingain;const outgain=_v1.outgain;const threshold=_v1.threshold;const ratio=_v1.ratio;const attack=_v1.attack;const release=_v1.release;if(input.length===0)return this._O;for(let _U=0;_U<input[0].length;++_U){let frame=input.map(_w1=>_w1[_U]);output.forEach((_w1,_x1)=>{_w1[_U]=frame[_x1];});const _y1=(ingain[_U]!==undefined)?ingain[_U]:ingain[0];frame=frame.map(_z1=>_z1*=_y1);const rect=frame.map(_z1=>Math.abs(_z1));
const max=Math.max(...rect);const _A1=_B1(max);const _C1=(threshold[_U]!==undefined)?threshold[_U]:threshold[0];const _D1=_B1(_C1);const _E1=Math.max(0,_A1-_D1);const _i1=(attack[_U]!==undefined)?attack[_U]:attack[0];const _j1=(release[_U]!==undefined)?release[_U]:release[0];this._r1._m1(_i1);this._r1._n1(_j1);this._s1=this._r1.process(_E1,this._s1);const _V=(bypass[_U]!==undefined)?bypass[_U]:bypass[0];if(_V>0)continue;const _81=(ratio[_U]!==undefined)?ratio[_U]:ratio[0];const _F1=(this._s1/_81)-this._s1;
const __=_G1(_F1);frame=frame.map(_z1=>_z1*=__);const _H1=(outgain[_U]!==undefined)?outgain[_U]:outgain[0];frame=frame.map(_z1=>_z1*=_H1);output.forEach((_w1,_x1)=>{_w1[_U]=frame[_x1];});}return this._O;}}function _B1(_I1){return 20*Math.log10(_I1);}function _G1(_I1){return Math.pow(10,_I1/20);}registerProcessor("compressor-processor",_o1);class _J1 extends AudioWorkletProcessor{static _K1=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}
,{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_J1._K1},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_21){super();this._N();const _31=_21.outputChannelCount[0];const _L1=(_J1._K1*sampleRate)+1;this.buffer=new Array(_31);this._M1=new Uint32Array(_31);for(let c=0;c<_31;++c)this.buffer[c]=new Float32Array(_L1);}process(_R,_S,parameters){const input=_R[0];
const output=_S[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _T=input[c];const _Z=output[c];for(let _U=0;_U<_T.length;++_U){_Z[_U]=_T[_U];const _C1=(time[_U]!==undefined)?time[_U]:time[0];const _N1=this._O1(c,_C1);const _61=(feedback[_U]!==undefined)?feedback[_U]:feedback[0];const _P1=_T[_U]+(_N1*_61);this.write(c,_P1);const _V=(bypass[_U]!==undefined)?bypass[_U]:bypass[0];if(_V>0.0){continue;}const _91=(mix[_U]!==undefined)?mix[_U]:mix[0];
_Z[_U]*=(1-_91);_Z[_U]+=(_N1*_91);}}return this._O;}_O1(_Q1,_b1){const _R1=_b1*sampleRate;let _S1=(this._M1[_Q1]-~~_R1);let _T1=(_S1-1);while(_S1<0)_S1+=this.buffer[_Q1].length;while(_T1<0)_T1+=this.buffer[_Q1].length;const frac=_R1-~~_R1;const _U1=this.buffer[_Q1][_S1];const _V1=this.buffer[_Q1][_T1];return _U1+(_V1-_U1)*frac;}write(_Q1,_W1){++this._M1[_Q1];this._M1[_Q1]%=this.buffer[_Q1].length;this.buffer[_Q1][this._M1[_Q1]]=_W1;}}registerProcessor("delay-processor",_J1);class _X1 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [];}constructor(){super();this._N();}process(_Y1,_Z1,__1){const input=_Y1[0];const _02=_Z1[0];const _12=_Z1[1];for(let c=0;c<input.length;++c){const _T=input[c];const _22=_02[c];const _32=_12[c];for(let _U=0;_U<_T.length;++_U){_22[_U]=_T[_U];_32[_U]=_T[_U];}}return this._O;}}class _42 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._N();}process(_Y1,
_Z1,__1){const _X=_Y1[0];const _Y=_Y1[1];const output=_Z1[0];const bypass=__1.bypass;for(let c=0;c<_Y.length;++c){const _52=_X[c];const _62=_Y[c];const _Z=output[c];for(let _U=0;_U<_52.length;++_U){const _V=(bypass[_U]!==undefined)?bypass[_U]:bypass[0];if(_V>0){_Z[_U]=_62[_U];}else {_Z[_U]=_52[_U];}}}return this._O;}}registerProcessor("eq-input",_X1);registerProcessor("eq-output",_42);class _72 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,
minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._N();}process(_R,_S,parameters){const input=_R[0];const output=_S[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<input.length;++c){const _T=input[c];const _Z=output[c];for(let _U=0;_U<_T.length;++_U){_Z[_U]=_T[_U];const _V=(bypass[_U]!==undefined)?bypass[_U]:bypass[0];if(_V>0.0){continue;}const __=(gain[_U]!==undefined)?gain[_U]:gain[0];_Z[_U]*=__;}}return this._O;
}}registerProcessor("gain-processor",_72);class _82 extends AudioWorkletProcessor{static get parameterDescriptors(){const _92=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_92),minValue:10.0,maxValue:_92},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_21){super();this._N();
const _31=_21.outputChannelCount[0];this._a2=0;this._b2=0;this._c2=0;this._d2=0;this._e2=0;this._f2=new Float32Array(_31);this._g2=new Float32Array(_31);this._h2=new Float32Array(_31);this._i2=new Float32Array(_31);this._j2=-1;this._k2=-1;this._l2=-1;}process(_R,_S,parameters){const input=_R[0];const output=_S[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _m2=(freq.length===1&&q.length===1&&gain.length===1);if(_m2)this._n2(freq[0],q[0],gain[0]);
for(let c=0;c<input.length;++c){const _T=input[c];const _Z=output[c];for(let _U=0;_U<_T.length;++_U){if(_m2===false){const _61=(freq[_U]!==undefined)?freq[_U]:freq[0];const _o2=(q[_U]!==undefined)?q[_U]:q[0];const __=(gain[_U]!==undefined)?gain[_U]:gain[0];this._n2(_61,_o2,__);}const _p2=this._c2*_T[_U]+this._d2*this._f2[c]+this._e2*this._g2[c]-this._a2*this._h2[c]-this._b2*this._i2[c];this._g2[c]=this._f2[c];this._f2[c]=_T[_U];this._i2[c]=this._h2[c];this._h2[c]=_p2;const _V=(bypass[_U]!==undefined)?bypass[_U]:bypass[0];
_Z[_U]=(_V>0)?_T[_U]:_p2;}}return this._O;}_n2(_q2,_r2,_s2){if(_q2===this._j2&&_r2===this._k2&&_s2===this._l2)return;const _t2=2*Math.PI*_q2/sampleRate;const _u2=Math.cos(_t2);const _v2=Math.sqrt(_s2);const _w2=_v2+1;const _x2=_v2-1;const _y2=_w2*_u2;const _z2=_x2*_u2;const _A2=_w2-_z2;const _B2=_w2+_z2;const alpha=Math.sin(_t2)/(2*_r2);const _C2=(2*Math.sqrt(_v2)*alpha);const _D2=_A2+_C2;const _a2=2*(_x2-_y2);const _b2=_A2-_C2;const _c2=_v2*(_B2+_C2);const _d2=-2*_v2*(_x2+_y2);const _e2=_v2*(_B2-_C2);this._a2=_a2/_D2;
this._b2=_b2/_D2;this._c2=_c2/_D2;this._d2=_d2/_D2;this._e2=_e2/_D2;this._j2=_q2;this._k2=_r2;this._l2=_s2;}}registerProcessor("hi-shelf-processor",_82);class _E2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _F2=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_F2),minValue:10.0,maxValue:_F2},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}
];}constructor(_21){super();this._N();const _31=_21.outputChannelCount[0];this._a2=0;this._b2=0;this._c2=0;this._d2=0;this._e2=0;this._f2=new Float32Array(_31);this._g2=new Float32Array(_31);this._h2=new Float32Array(_31);this._i2=new Float32Array(_31);this._G2=-1;this._k2=-1;}process(_R,_S,parameters){const input=_R[0];const output=_S[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _m2=(cutoff.length===1&&q.length===1);if(_m2)this._n2(cutoff[0],q[0]);for(let c=0;
c<input.length;++c){const _T=input[c];const _Z=output[c];for(let _U=0;_U<_T.length;++_U){if(_m2===false){const c=(cutoff[_U]!==undefined)?cutoff[_U]:cutoff[0];const _o2=(q[_U]!==undefined)?q[_U]:q[0];this._n2(c,_o2);}const _p2=this._c2*_T[_U]+this._d2*this._f2[c]+this._e2*this._g2[c]-this._a2*this._h2[c]-this._b2*this._i2[c];this._g2[c]=this._f2[c];this._f2[c]=_T[_U];this._i2[c]=this._h2[c];this._h2[c]=_p2;const _V=(bypass[_U]!==undefined)?bypass[_U]:bypass[0];_Z[_U]=(_V>0)?_T[_U]:_p2;}}return this._O;}
_n2(_H2,_r2){if(_H2===this._G2&&_r2===this._k2)return;const _t2=2*Math.PI*_H2/sampleRate;const alpha=Math.sin(_t2)/(2*_r2);const _u2=Math.cos(_t2);const _D2=1+alpha;const _a2=-2*_u2;const _b2=1-alpha;const _c2=(1+_u2)/2;const _d2=-1-_u2;const _e2=(1+_u2)/2;this._a2=_a2/_D2;this._b2=_b2/_D2;this._c2=_c2/_D2;this._d2=_d2/_D2;this._e2=_e2/_D2;this._G2=_H2;this._k2=_r2;}}registerProcessor("hpf2-processor",_E2);class _I2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _92=sampleRate*0.45;return [{
name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_92),minValue:10.0,maxValue:_92},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_21){super();this._N();const _31=_21.outputChannelCount[0];this._a2=0;this._b2=0;this._c2=0;this._d2=0;this._e2=0;this._f2=new Float32Array(_31);this._g2=new Float32Array(_31);
this._h2=new Float32Array(_31);this._i2=new Float32Array(_31);this._j2=-1;this._k2=-1;this._l2=-1;}process(_R,_S,parameters){const input=_R[0];const output=_S[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _m2=(freq.length===1&&q.length===1&&gain.length===1);if(_m2)this._n2(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _T=input[c];const _Z=output[c];for(let _U=0;_U<_T.length;++_U){if(_m2===false){const _61=(freq[_U]!==undefined)?freq[_U]:freq[0];
const _o2=(q[_U]!==undefined)?q[_U]:q[0];const __=(gain[_U]!==undefined)?gain[_U]:gain[0];this._n2(_61,_o2,__);}const _p2=this._c2*_T[_U]+this._d2*this._f2[c]+this._e2*this._g2[c]-this._a2*this._h2[c]-this._b2*this._i2[c];this._g2[c]=this._f2[c];this._f2[c]=_T[_U];this._i2[c]=this._h2[c];this._h2[c]=_p2;const _V=(bypass[_U]!==undefined)?bypass[_U]:bypass[0];_Z[_U]=(_V>0)?_T[_U]:_p2;}}return this._O;}_n2(_q2,_r2,_s2){if(_q2===this._j2&&_r2===this._k2&&_s2===this._l2)return;const _t2=2*Math.PI*_q2/sampleRate;
const _u2=Math.cos(_t2);const _v2=Math.sqrt(_s2);const _w2=_v2+1;const _x2=_v2-1;const _y2=_w2*_u2;const _z2=_x2*_u2;const _A2=_w2-_z2;const _B2=_w2+_z2;const alpha=Math.sin(_t2)/(2*_r2);const _C2=(2*Math.sqrt(_v2)*alpha);const _D2=_B2+_C2;const _a2=-2*(_x2+_y2);const _b2=_B2-_C2;const _c2=_v2*(_A2+_C2);const _d2=2*_v2*(_x2-_y2);const _e2=_v2*(_A2-_C2);this._a2=_a2/_D2;this._b2=_b2/_D2;this._c2=_c2/_D2;this._d2=_d2/_D2;this._e2=_e2/_D2;this._j2=_q2;this._k2=_r2;this._l2=_s2;}}registerProcessor("lo-shelf-processor",
_I2);class _J2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _F2=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_F2),minValue:10.0,maxValue:_F2},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_21){super();this._N();const _31=_21.outputChannelCount[0];this._a2=0;this._b2=0;this._c2=0;this._d2=0;this._e2=0;this._f2=new Float32Array(_31);
this._g2=new Float32Array(_31);this._h2=new Float32Array(_31);this._i2=new Float32Array(_31);this._G2=-1;this._k2=-1;}process(_R,_S,parameters){const input=_R[0];const output=_S[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _m2=(cutoff.length===1&&q.length===1);if(_m2)this._n2(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _T=input[c];const _Z=output[c];for(let _U=0;_U<_T.length;++_U){if(_m2===false){const c=(cutoff[_U]!==undefined)?cutoff[_U]:cutoff[0];const _o2=(q[_U]!==undefined)?q[_U]:q[0];
this._n2(c,_o2);}const _p2=this._c2*_T[_U]+this._d2*this._f2[c]+this._e2*this._g2[c]-this._a2*this._h2[c]-this._b2*this._i2[c];this._g2[c]=this._f2[c];this._f2[c]=_T[_U];this._i2[c]=this._h2[c];this._h2[c]=_p2;const _V=(bypass[_U]!==undefined)?bypass[_U]:bypass[0];_Z[_U]=(_V>0)?_T[_U]:_p2;}}return this._O;}_n2(_H2,_r2){if(_H2===this._G2&&_r2===this._k2)return;const _t2=2*Math.PI*_H2/sampleRate;const alpha=Math.sin(_t2)/(2*_r2);const _u2=Math.cos(_t2);const _D2=1+alpha;const _a2=-2*_u2;const _b2=1-alpha;const _c2=(1-_u2)/2;
const _d2=1-_u2;const _e2=(1-_u2)/2;this._a2=_a2/_D2;this._b2=_b2/_D2;this._c2=_c2/_D2;this._d2=_d2/_D2;this._e2=_e2/_D2;this._G2=_H2;this._k2=_r2;}}registerProcessor("lpf2-processor",_J2);class _K2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _92=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_92),minValue:10.0,maxValue:_92},{name:"q",automationRate:"a-rate",defaultValue:1.0,
minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_21){super();this._N();const _31=_21.outputChannelCount[0];this._a2=0;this._b2=0;this._c2=0;this._d2=0;this._e2=0;this._f2=new Float32Array(_31);this._g2=new Float32Array(_31);this._h2=new Float32Array(_31);this._i2=new Float32Array(_31);this._j2=-1;this._k2=-1;this._l2=-1;}process(_R,_S,parameters){const input=_R[0];const output=_S[0];const bypass=parameters.bypass;const freq=parameters.freq;
const q=parameters.q;const gain=parameters.gain;const _m2=(freq.length===1&&q.length===1&&gain.length===1);if(_m2)this._n2(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _T=input[c];const _Z=output[c];for(let _U=0;_U<_T.length;++_U){if(_m2===false){const _61=(freq[_U]!==undefined)?freq[_U]:freq[0];const _o2=(q[_U]!==undefined)?q[_U]:q[0];const __=(gain[_U]!==undefined)?gain[_U]:gain[0];this._n2(_61,_o2,__);}const _p2=this._c2*_T[_U]+this._d2*this._f2[c]+this._e2*this._g2[c]-this._a2*this._h2[c]-this._b2*this._i2[c];
this._g2[c]=this._f2[c];this._f2[c]=_T[_U];this._i2[c]=this._h2[c];this._h2[c]=_p2;const _V=(bypass[_U]!==undefined)?bypass[_U]:bypass[0];_Z[_U]=(_V>0)?_T[_U]:_p2;}}return this._O;}_n2(_q2,_r2,_s2){if(_q2===this._j2&&_r2===this._k2&&_s2===this._l2)return;const _t2=2*Math.PI*_q2/sampleRate;const _u2=Math.cos(_t2);const _v2=Math.sqrt(_s2);const alpha=Math.sin(_t2)/(2*_r2);const _L2=alpha/_v2;const _M2=alpha*_v2;const _D2=1+_L2;const _a2=-2*_u2;const _b2=1-_L2;const _c2=1+_M2;const _d2=_a2;const _e2=1-_M2;this._a2=_a2/_D2;
this._b2=_b2/_D2;this._c2=_c2/_D2;this._d2=_d2/_D2;this._e2=_e2/_D2;this._j2=_q2;this._k2=_r2;this._l2=_s2;}}registerProcessor("peak-eq-processor",_K2);class _N2{constructor(_O2){this._P2=0;this._Q2=0;this.feedback=0;this._R2=0;this.buffer=new Float32Array(_O2);this._S2=0;}process(_W1){const out=this.buffer[this._S2];this._R2=(this._R2*this._P2)+(out*this._Q2);this.buffer[this._S2]=_W1+(this._R2*this.feedback);++this._S2;this._S2%=this.buffer.length;return out;}_T2(_U2){this.feedback=Math.min(Math.max(0,
_U2),1);}_V2(_W2){this._P2=Math.min(Math.max(0,_W2),1);this._Q2=1-this._P2;}}class _X2{constructor(_O2){this.feedback=0;this.buffer=new Float32Array(_O2);this._S2=0;}process(_W1){const out=this.buffer[this._S2];this.buffer[this._S2]=_W1+(out*this.feedback);++this._S2;this._S2%=this.buffer.length;return(out-_W1);}_T2(_U2){this.feedback=Math.min(Math.max(0,_U2),1);}}class _Y2 extends AudioWorkletProcessor{static _Z2=8;static __2=4;static _03=0.015;static _13=0.4;static _23=0.28;static _33=0.7;static _43=[1116,
1188,1277,1356,1422,1491,1557,1617];static _53=[1139,1211,1300,1379,1445,1514,1580,1640];static _63=[556,441,341,225];static _73=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}
];}constructor(_21){super();this._N();const _31=_21.outputChannelCount[0];this._83=-1;this._93=-1;this._a3=new Array(_31);this._b3=new Array(_31);const _c3=[_Y2._43,_Y2._53];const _d3=[_Y2._63,_Y2._73];for(let c=0;c<_31;++c){this._a3[c]=new Array(_Y2._Z2);this._b3[c]=new Array(_Y2.__2);for(let i=0;i<_Y2._Z2;++i)this._a3[c][i]=new _N2(_c3[c%_c3.length][i]);for(let i=0;i<_Y2.__2;++i)this._b3[c][i]=new _X2(_d3[c%_d3.length][i]);}this._e3(0.5);this._V2(0.5);for(let c=0;c<_31;++c)for(let i=0;i<_Y2.__2;++i)this._b3[c][i]._T2(0.5);
}process(_R,_S,parameters){const input=_R[0];const output=_S[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _T=input[c];const _Z=output[c];for(let _f3=0;_f3<_T.length;++_f3){const _U=(size[_f3]!==undefined)?size[_f3]:size[0];const _g3=(damp[_f3]!==undefined)?damp[_f3]:damp[0];this._e3(_U);this._V2(_g3);_Z[_f3]=_T[_f3];let out=0;const _71=_T[_f3]*_Y2._03;for(let i=0;i<_Y2._Z2;++i)out+=this._a3[c][i].process(_71);
for(let i=0;i<_Y2.__2;++i)out=this._b3[c][i].process(out);const _V=(bypass[_f3]!==undefined)?bypass[_f3]:bypass[0];if(_V>0.0){continue;}const _91=(mix[_f3]!==undefined)?mix[_f3]:mix[0];_Z[_f3]*=(1-_91);_Z[_f3]+=(out*_91);}}return this._O;}_e3(_O2){if(_O2===this._83)return;const size=(_O2*_Y2._23)+_Y2._33;for(let c=0;c<this._a3.length;++c)for(let i=0;i<_Y2._Z2;++i)this._a3[c][i]._T2(size);this._83=_O2;}_V2(_W2){if(_W2===this._93)return;const damp=_W2*_Y2._13;for(let c=0;c<this._a3.length;++c)for(let i=0;i<_Y2._Z2;
++i)this._a3[c][i]._V2(damp);this._93=_W2;}}registerProcessor("reverb1-processor",_Y2);class _h3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",
automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_21){super();this._N();const _31=_21.outputChannelCount[0];this._i3=new Array(_31).fill(1.0);this._j3=new Array(_31).fill(0.0);this._k3=new Array(_31).fill(_l3._m3._n3);this._o3=new Array(_31);for(let c=0;c<_31;++c){this._o3[c]=new _p3();this._o3[c]._q3(sampleRate);this._o3[c]._r3(this._i3[c]);this._o3[c]._s3(this._k3[c]);if(c%2===1){this._o3[c]._t3(this._j3[c]);}}}process(_R,_S,parameters){const input=_R[0];const output=_S[0];const bypass=parameters.bypass;
const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let c=0;c<input.length;++c){const _T=input[c];const _Z=output[c];for(let _U=0;_U<_T.length;++_U){_Z[_U]=_T[_U];const _81=(rate[_U]!==undefined)?rate[_U]:rate[0];const _u3=(offset[_U]!==undefined)?offset[_U]:offset[0];const _v3=(shape[_U]!==undefined)?shape[_U]:shape[0];this._w3(c,_81,_u3,_v3);const _x3=this._o3[c]._O1();const _V=(bypass[_U]!==undefined)?bypass[_U]:bypass[0];if(_V>0.0){
continue;}const i=(intensity[_U]!==undefined)?intensity[_U]:intensity[0];const out=_T[_U]*_x3*i;_Z[_U]*=(1.0-i);_Z[_U]+=out;}}return this._O;}_w3(_Q1,_y3,_z3,_A3){if(_y3!==this._i3[_Q1]){this._o3[_Q1]._r3(_y3);this._i3[_Q1]=_y3;}if(_z3!==this._j3[_Q1]){if(_Q1%2===1){this._o3[_Q1]._t3(_z3);}this._j3[_Q1]=_z3;}if(_A3!==this._k3[_Q1]){this._o3[_Q1]._s3(_A3);this._k3[_Q1]=_A3;}}}registerProcessor("tremolo-processor",_h3);function _l3(){}_l3._m3={_n3:0,_B3:1,_C3:2,_D3:3,_E3:4,_F3:5};_l3._G3=function(_H3){
return 1.0-_H3;};_l3._I3=function(_H3){return _H3;};_l3._J3=function(_H3){return 0.5*(Math.sin((_H3*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_l3._K3=function(_H3){if(_H3<0.5){return 0.0;}return 1.0;};_l3._L3=function(_H3){if(_H3<0.5){return 2.0*_H3;}return 2.0-(2.0*_H3);};_l3._M3=[_l3._G3,_l3._I3,_l3._J3,_l3._K3,_l3._L3];_N3._O3=512;_N3._P3=1.0/_N3._O3;function _N3(_Q3){this.data=new Float32Array(_N3._O3);for(let i=0;i<_N3._O3;++i){this.data[i]=_Q3(i*_N3._P3);}}_N3.prototype._O1=function(_H3){_H3=Math.max(0.0,_H3);
_H3=Math.min(_H3,1.0);const _R3=_H3*_N3._O3;const _S3=~~_R3;const _T3=_R3-_S3;let _S1=_S3;let _T1=_S1+1;if(_S1>=_N3._O3){_S1-=_N3._O3;}if(_T1>=_N3._O3){_T1-=_N3._O3;}const _U1=this.data[_S1];const _V1=this.data[_T1];return _U1+(_V1-_U1)*_T3;};_p3._U3=[];_p3._V3=false;_p3._W3=0.0;_p3._92=20.0;function _p3(){this._X3=48000;this.shape=_l3._m3._C3;this.freq=1.0;this._Y3=0.0;this._P3=0.0;this._Z3=0.0;if(_p3._V3==true){return;}for(let i=0;i<_l3._m3._F3;++i){_p3._U3[i]=new _N3(_l3._M3[i]);}_p3._V3=true;}_p3.__3=function(){
return(_p3._V3==true);};_p3.prototype._q3=function(_04){this._X3=_04;this._14();};_p3.prototype._r3=function(_q2){_q2=Math.max(_p3._W3,_q2);_q2=Math.min(_q2,_p3._92);this.freq=_q2;this._14();};_p3.prototype._t3=function(_z3){_z3=Math.max(0.0,_z3);_z3=Math.min(_z3,1.0);const _24=_z3-this._Z3;this._Z3=_z3;this._Y3+=_24;while(this._Y3>=1.0){this._Y3-=1.0;}while(this._Y3<0.0){this._Y3+=1.0;}};_p3.prototype._s3=function(_A3){_A3=Math.max(0,_A3);_A3=Math.min(_A3,_l3._m3._F3-1);this.shape=_A3;};_p3.prototype._O1=function(){
const result=_p3._U3[this.shape]._O1(this._Y3);this._Y3+=this._P3;while(this._Y3>=1.0){this._Y3-=1.0;}return result;};_p3.prototype._14=function(){this._P3=this.freq/this._X3;};